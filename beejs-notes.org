#+TITLE: Beejs Notes

* Chapter One

*Compiling for this book*

~gcc -std=c99 -pedantic foo.c~

C Preprocessor

Anything that starts with an octothorpe is something the preprocessor operates on before the compiler, common /directives/ ~#include~ ~#define~

one way function calls can be indicated is by a lack of squirelly braces after them

sequences that start with ~%~ tell ~printf~ what to print. %s - string %f - float %d int etc



* Chapter 3 Variables & Statements

any characters in the range of 0-9, A-Z, a-z and underscores
*Cannot start with*
- a digit (0-9)
- 2 underscores
- an underscore followed by a capital A-Z

#+begin_src C
int main(void) {
  int i = 2;
  float f = 3.14;
  char *s = "Hello, this is a string";

  printf("%s i = %d and f = %f!\n", s, i, f);
}
#+end_src

#+RESULTS:
| Hello | this is a string i = 2 and f = 3.140000! |

** 3.2 Operators and Expressions

~sizeof~ operator

~%zu~ is format specifier for ~size_t~ (t is for type, pronounced "size tee")

~printf("%zu", sizeof a); //prints 4 on my system~

~printf("%zu", sizeof(2 + 7)); //prints 4 on my system~

~printf("%zu", sizeof 3.14); //prints 8 on my system~

it is the size in bytes of th /type/ of the expression itself, thats why 2+7 is the same as size a, they are both an ~int~

** 3.2.3 Ternary Operator

an expression whose value depends on the result of a conditional embedded in it

~y += x > 10? 17: 37;~

is equivalent to this non expression:

#+begin_src C
if (x > 10)
    y += 17;
else
    y += 37;
#+end_src

or an example that prints if a number stored in x is odd or even:

~printf("The number %d is %s.\n", x, x % 2, == 0?"even": "odd")~

** 3.2.4 Pre and Post Increment and Decrement

pre increment:

~++ i~ or ~--i~

value is incremented or decremented /before/ the value is evaluated.

#+begin_src C
i = 10;
j = 5 + ++i;

printf("%d, %d\n", i, j); // Prints 11, 16
#+end_src

this technique is used frequently with array and pointer access and manipulation. gives a way to use the value in a variable, and also inc. or dec. the value before or after it is used

*Comma Operator*

with the comma operator the value of the comma expression is the value of the rightmost expression

#+begin_src C
x = 1, 2, 3;

printf("x is %d\n", x); // prints 3, rightmost value
#+end_src

*Conditional Operators*

#+begin_src C
a == b; // Trueif a is equivalent to b
a != b; // Trueif a is not equivalent to b
a < b;  // Trueif a is less than b
a > b;  // Trueif a is greater than b
a <= b; // Trueif a is less than or equal to b
a >= b; // Trueif a is greater than or equal to b
#+end_src


*Boolean Operator*

~&&~ and, ~||~ or, ~!~ not.

~!~ has higher precedence than other booleans, must use parenthesis

#+begin_src C
if (!(x < 12))
  printf("x is not less than 12\n");

// is equivalent to

if (x > 12)
  printf("x is not less than 12\n");
#+end_src

** 3.3 Flow Control

~if, for, while, do-while~

    an if statement will run one thing after th ~if~, that can be a single statement or a block of statements, surrounded by ~{ }~

   *While*

   #+begin_src C
/* print the following */
/* i is now 0! */
/* i is now 1! */
/* [more of the same between 2 and 7] */
/* i is now 8! */
/* i is now 9! */

i = 0;
while (1 < 10) {
  printf("i is now %d!\n", i);
  i++;
}
printf("All done.")
   #+end_src


*do-while*

#+begin_src C
/* while statement */

i = 10;

// not executed, less than 10
while (i < 10) {
  printf("while: i is %d\n", i);
  i++;
}

/* using a do-while statement */
i = 10;

/* this is executed once, because the loop condition is not checked until */
/* after the body of the loop runs */

do {
  printf("do-while: i is %d\n", i);
  i++;
} while (i < 10);

printf("All done!\n");
#+end_src


Both conditions are false, the ~while~ loop fails and is never executed

In the ~do-while~ the condition is checked /after/ the block f code executes, so it always executes at least once, prints message, increments ~i~, then fails the condition, continues to ~"All done"~

a for loop would be better

#+begin_src C
#include <stdio.h>  // for printf
#include <stdlib.h> // for rand

int main(void) {
  int r;

  do {
    r = rand() % 100; // get a random number between 0 and 99
    printf("%d\n", r);
  } while (r != 37); // repeat until 37 comes up
}
#+end_src

#+RESULTS:
| 83 |
| 86 |
| 77 |
| 15 |
| 93 |
| 35 |
| 86 |
| 92 |
| 49 |
| 21 |
| 62 |
| 27 |
| 90 |
| 59 |
| 63 |
| 26 |
| 40 |
| 26 |
| 72 |
| 36 |
| 11 |
| 68 |
| 67 |
| 29 |
| 82 |
| 30 |
| 62 |
| 23 |
| 67 |
| 35 |
| 29 |
|  2 |
| 22 |
| 58 |
| 69 |
| 67 |
| 93 |
| 56 |
| 11 |
| 42 |
| 29 |
| 73 |
| 21 |
| 19 |
| 84 |
| 37 |



** 3.3.4 The ~for~ statement

if you know the number of times you want to loop

2 snippeets of equivalent code, ~for~ loop is a more compact representation

#+begin_src C
/* print the numbers between 0 and 9, inclusive */

// while statement

i = 0;
while (i < 10) {
  printf("i is %d\n", i);
  i++;
}

i = 0;
for (i = 0; i < 10; 1 ++;) {
  printf("i is %d\n", i);
}
#+end_src

#+RESULTS:

~for (initialize the things; loop if this is true; do this after each loop)~


#+begin_src C
#include <stdio.h>

    int main(void)
        {
            int goat_count;

                printf("Enter a goat count: ");
                scanf("%d", &goat_count); // read integer from keyboard

                    switch (goat_count) {
                        case 0:
                            printf("You have no goats.\n");
                            break;

                        case 1:
                            printf("You have a singular of goat.\n");
                            break;

                        case 2:
                            printf("You have a brace of goats.\n");
                            break;

                        default:
                            printf("You have a bona fide plethora of goats.\n");
                            break;
                        }
            }
#+end_src

#+RESULTS:
: Enter a goat count: You have a bona fide plethora of goats.

* Chapter 4: Functions

Functions accept a variety of arguments and return a value. One important thing: the arguments and return value types are predeclared.

#+begin_src C
int plus_one(int n) // the "definition"
    {
    return n + 1;
    }
#+end_src

#+begin_src C
int main(void)
    {
    int i = 10, j;

        j = plus_one(i); // the "call"

        printf("i + 1 is %d\n", j);
    }
#+end_src


~void~ is a  keyword thats used to indicate that the function accepts no arguments

you can also return ~void~ to indicate that you dont return a value:

#+begin_src C
// this function takes no parameters and returns no value:

void hello(void)
    {
    printf("Words\n");
}

int main(void)
    {
    hello();
    }
#+end_src
