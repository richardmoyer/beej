#+TITLE: Beejs Notes

* Chapter One

*Compiling for this book*

~gcc -std=c99 -pedantic foo.c~

C Preprocessor

Anything that starts with an octothorpe is something the preprocessor operates on before the compiler, common /directives/ ~#include~ ~#define~

one way function calls can be indicated is by a lack of squirelly braces after them

sequences that start with ~%~ tell ~printf~ what to print. %s - string %f - float %d int etc



* Chapter 3 Variables & Statements

any characters in the range of 0-9, A-Z, a-z and underscores
*Cannot start with*
- a digit (0-9)
- 2 underscores
- an underscore followed by a capital A-Z

#+begin_src C
int main(void) {
  int i = 2;
  float f = 3.14;
  char *s = "Hello, this is a string";

  printf("%s i = %d and f = %f!\n", s, i, f);
}
#+end_src

#+RESULTS:
| Hello | this is a string i = 2 and f = 3.140000! |

** 3.2 Operators and Expressions

~sizeof~ operator

~%zu~ is format specifier for ~size_t~ (t is for type, pronounced "size tee")

~printf("%zu", sizeof a); //prints 4 on my system~

~printf("%zu", sizeof(2 + 7)); //prints 4 on my system~

~printf("%zu", sizeof 3.14); //prints 8 on my system~

it is the size in bytes of th /type/ of the expression itself, thats why 2+7 is the same as size a, they are both an ~int~

** 3.2.3 Ternary Operator

an expression whose value depends on the result of a conditional embedded in it

~y += x > 10? 17: 37;~

is equivalent to this non expression:

#+begin_src C
if (x > 10)
    y += 17;
else
    y += 37;
#+end_src

or an example that prints if a number stored in x is odd or even:

~printf("The number %d is %s.\n", x, x % 2, == 0?"even": "odd")~

** 3.2.4 Pre and Post Increment and Decrement

pre increment:

~++ i~ or ~--i~

value is incremented or decremented /before/ the value is evaluated.

#+begin_src C
i = 10;
j = 5 + ++i;

printf("%d, %d\n", i, j); // Prints 11, 16
#+end_src

this technique is used frequently with array and pointer access and manipulation. gives a way to use the value in a variable, and also inc. or dec. the value before or after it is used

*Comma Operator*

with the comma operator the value of the comma expression is the value of the rightmost expression

#+begin_src C
x = 1, 2, 3;

printf("x is %d\n", x); // prints 3, rightmost value
#+end_src

*Conditional Operators*

#+begin_src C
a == b; // Trueif a is equivalent to b
a != b; // Trueif a is not equivalent to b
a < b;  // Trueif a is less than b
a > b;  // Trueif a is greater than b
a <= b; // Trueif a is less than or equal to b
a >= b; // Trueif a is greater than or equal to b
#+end_src


*Boolean Operator*

~&&~ and, ~||~ or, ~!~ not.

~!~ has higher precedence than other booleans, must use parenthesis

#+begin_src C
if (!(x < 12))
  printf("x is not less than 12\n");

// is equivalent to

if (x > 12)
  printf("x is not less than 12\n");
#+end_src

** 3.3 Flow Control

~if, for, while, do-while~
